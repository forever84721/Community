import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Hello ${name}"
  String greetTo(String name) => "Hello ${name}";
  /// "Title"
  String get AppTitle => "Title";
  /// "Search..."
  String get SearchDotDotDot => "Search...";
  /// "Post"
  String get Post => "Post";
  /// "Login"
  String get Login => "Login";
  /// "Like"
  String get Like => "Like";
  /// "Comment"
  String get Comment => "Comment";
  /// "Share"
  String get Share => "Share";
  /// "No More Data"
  String get NoMoreData => "No More Data";
  /// "Click to refresh"
  String get refresh => "Click to refresh";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_zh_TW extends I18n {
  const _I18n_zh_TW();

  /// "Hello ${name}"
  @override
  String greetTo(String name) => "Hello ${name}";
  /// "標題"
  @override
  String get AppTitle => "標題";
  /// "搜尋..."
  @override
  String get SearchDotDotDot => "搜尋...";
  /// "貼文"
  @override
  String get Post => "貼文";
  /// "登入"
  @override
  String get Login => "登入";
  /// "讚"
  @override
  String get Like => "讚";
  /// "留言"
  @override
  String get Comment => "留言";
  /// "分享"
  @override
  String get Share => "分享";
  /// "沒有資料了"
  @override
  String get NoMoreData => "沒有資料了";
  /// "點擊刷新"
  @override
  String get refresh => "點擊刷新";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("zh", "TW")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh_TW" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_TW());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_TW());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}